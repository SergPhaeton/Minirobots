// == –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM ==
(function initTMA() {
try {
if (window.Telegram && Telegram.WebApp) {
Telegram.WebApp.ready();
const scheme = Telegram.WebApp.colorScheme;
Telegram.WebApp.setHeaderColor?.(scheme === 'dark' ? '#000000' : '#ffffff');
}
} catch (e) {}
})();

// == –ó–í–£–ö–û–í–û–ô –¢–ò–ö ==
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
function tick() {
const o = audioCtx.createOscillator();
const g = audioCtx.createGain();
o.type = 'square'; o.frequency.value = 2200;
g.gain.value = 0.02;
o.connect(g); g.connect(audioCtx.destination);
const now = audioCtx.currentTime;
o.start(now);
g.gain.exponentialRampToValueAtTime(0.0001, now + 0.04);
o.stop(now + 0.045);
}

document.addEventListener('DOMContentLoaded', () => {

// === –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ì–†–´ ===
const maxEnergy = 5000;
const panelProduction = 0.315;
const priceRatio = 1.12;
const basePanelCost = 10;
const baseStationCost = 5;
const stationPriceRatio = 2.5;
const robotBuildTime = 40; // —Å–µ–∫ –Ω–∞ —Ä–æ–±–æ—Ç–∞

let energy = 0;
let panels = 1;
let trees = 0;
let chargingStations = 0;
let robots = 0;
let robotProgress = 0;
let lastUpdate = Date.now();

// === DOM –≠–õ–ï–ú–ï–ù–¢–´ ===
const energyElem = document.getElementById('energy');
const productionElem = document.getElementById('production');
const panelsCountElem = document.getElementById('panels-count');
const panelCostElem = document.getElementById('panel-cost');
const panelBtn = document.getElementById('panel-btn');
const treeBtn = document.getElementById('tree-btn');
const treesCountElem = document.getElementById('trees-count');
const treesContainer = document.getElementById('trees-container');
const stationBtn = document.getElementById('charging-station-btn');
const robotCont = document.getElementById('robots-container');
const robotsCountElem = document.getElementById('robots-count');
const maxRobotsElem = document.getElementById('max-robots');
const robProgCont = document.getElementById('robot-progress-container');
const robProgBar = document.getElementById('robot-progress-bar');
const btnExit = document.getElementById('btn-exit');
if (btnExit) {
  btnExit.onclick = () => {
    saveGame();                 // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    window.location.href = 'index.html';  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
  };
}


// === –¢–ï–ö–°–¢–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö ===
const assistantMessages = [
  { 
    id: 'energy-0.1', 
    threshold: { energy: 0.1 }, 
    text: [
      '–í—ã - –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ü–µ–ª–µ–≤—à–∏–π —Ä–æ–±–æ—Ç –ø–æ—Å–ª–µ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ–≥–∏–±–Ω—É—Ç—å –≤ –æ–≥–Ω–µ, –Ω–æ —Å–ª—É—á–∞–π–Ω–æ –Ω–∞—à–ª–∏ —Å–æ–ª–Ω–µ—á–Ω—É—é –ø–∞–Ω–µ–ª—å',
      '–ü–æ–¥–∫–ª—é—á–∏–≤—à–∏—Å—å –∫ –Ω–µ–π –≤—ã —Å–º–æ–≥–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥. –°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∑–∞—Ä—è–¥–∏–ª—Å—è.',
      '–ï—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤—Ç–æ—Ä—É—é —Å–æ–ª–Ω–µ—á–Ω—É—é –ø–∞–Ω–µ–ª—å - –∑–∞—Ä—è–¥–∫–∞ –ø–æ–π–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ.'
    ] 
  },
  { 
    id: 'energy-30', 
    threshold: { energy: 30 }, 
    text: [
      '–ß—Ç–æ —è –≤–∏–∂—É? –î—ã–º —Ä–∞—Å—Å–µ—è–ª—Å—è –∏ —Å—Ç–∞–ª–æ –≤–∏–¥–Ω–æ, —á—Ç–æ —Ä—è–¥–æ–º –µ—Å—Ç—å –ª–µ—Å. –ú—ã –º–æ–∂–µ–º –Ω–∞—Ä—É–±–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –æ–¥–Ω–∞–∫–æ —ç—Ç–æ –∑–∞—Ç—Ä–∞—Ç–Ω–æ –¥–ª—è —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏. –î–æ–∂–¥–∏—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ä—è–¥–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 100 –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥—Ä–µ–≤–µ—Å–∏–Ω—É.'
    ] 
  },
  { 
    id: 'trees-1', 
    threshold: { trees: 1 }, 
    text: [
      '–ü–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ üå≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥. –£ –≤–∞—Å —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! '
    ] 
  },
  { 
    id: 'energy-100', 
    threshold: { energy: 100 }, 
    text: [
      '–í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏, —á—Ç–æ–±—ã –¥–æ–±—ã–≤–∞—Ç—å –¥—Ä–µ–≤–µ—Å–∏–Ω—É. –î–∞, –ø–æ–Ω–∞—á–∞–ª—É –ø—Ä–∏–¥–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä—É–∫–∞–º–∏, –°–æ–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 5 üå≥ '
    ] 
  },
  { 
    id: 'panels-2', 
    threshold: { panels: 2 }, 
    text: [
      '–ö–∞–∂–¥–∞—è —Å–æ–ª–Ω–µ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–∞–µ—Ç ‚ö° 0.32/—Å–µ–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Ö —Å—Ç—Ä–æ–∏—Ç—å –∏ —É–≤–∏–¥–∏—Ç–µ –∫–∞–∫ —Ä–∞—Å—Ç–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏.',
      
    ] 
  },
];

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function checkAssistant() {
  const shown = JSON.parse(localStorage.getItem('shownAssistant') || '[]');
  const ctx = { panels, trees, energy, chargingStations, robots };

  const nextMsg = assistantMessages.find(msg =>
    !shown.includes(msg.id) &&
    Object.entries(msg.threshold).every(([key, val]) => ctx[key] >= val)
  );

  if (nextMsg) {
    shown.push(nextMsg.id);
    localStorage.setItem('shownAssistant', JSON.stringify(shown));
    showAssistant(nextMsg.text);
  }
}



// –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
function typeAssistant(lines, elem, speed = 50, callback) {
  let i = 0;
  function nextLine() {
    if (i >= lines.length) {
      callback?.();
      return;
    }
    let line = lines[i++];
    let pos = 0;
    elem.textContent = '';
    function step() {
      if (pos <= line.length) {
        elem.textContent = line.slice(0, pos) + '_';
        const ch = line.charAt(pos - 1);
        if (ch && ch !== ' ' && ch !== '\n' && ch !== '\t') {
          tick();    // <-- –ø–∏—â–∏—Ç –Ω–∞ –±—É–∫–≤—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!
        }
        pos++;
        setTimeout(step, speed);
      } else {
        elem.textContent = line;
        setTimeout(nextLine, speed * 5);
      }
    }
    step();
  }
  nextLine();
}



// –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
function showAssistant(lines) {
const panel = document.getElementById('assistant-panel');
const text = document.getElementById('assistant-text');
panel.classList.remove('hidden');
typeAssistant(lines, text, 54, () => {
// –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—á–∞—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–æ–π
});
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–Å–¢–û–í ===
function getNextPanelCost() {
return Math.floor(basePanelCost * Math.pow(priceRatio, panels - 1));
}

function getNextStationCost() {
return Math.floor(baseStationCost * Math.pow(stationPriceRatio, chargingStations));
}

function getMaxRobots() {
return chargingStations * 2;
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï/–ó–ê–ì–†–£–ó–ö–ê ===
function saveGame() {
localStorage.setItem('minirobots-save', JSON.stringify({
energy,
panels,
trees,
chargingStations,
robots,
robotProgress,
lastUpdate: Date.now()
}));
}

function loadGame() {
const data = JSON.parse(localStorage.getItem('minirobots-save') || '{}');
energy = typeof data.energy === 'number' ? data.energy : 0;
panels = typeof data.panels === 'number' ? data.panels : 1;
trees = typeof data.trees === 'number' ? data.trees : 0;
chargingStations = typeof data.chargingStations === 'number' ? data.chargingStations : 0;
robots = typeof data.robots === 'number' ? data.robots : 0;
robotProgress = typeof data.robotProgress === 'number' ? data.robotProgress : 0;
lastUpdate = data.lastUpdate || Date.now();
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===
function updateUI() {
// –≠–Ω–µ—Ä–≥–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
energyElem.textContent = energy.toFixed(1);
treesCountElem.textContent = trees;
productionElem.textContent = (panels * panelProduction).toFixed(2);

// –ü–∞–Ω–µ–ª–∏
panelsCountElem.textContent = panels;
panelCostElem.textContent = getNextPanelCost();

// –ö–Ω–æ–ø–∫–∞ —Ä—É–±–∫–∏ –¥–µ—Ä–µ–≤–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —ç–Ω–µ—Ä–≥–∏–∏ ‚â• 30
if (treeBtn) {
treeBtn.style.display = energy >= 30 ? '' : 'none';
}

// –°—Ç–∞–Ω—Ü–∏–∏
stationBtn.style.display = trees >= 1 ? '' : 'none';
stationBtn.textContent = `üîã –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—Ä—è–¥–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é (${chargingStations}) ‚Äî ${getNextStationCost()}üå≥`;

// –†–æ–±–æ—Ç—ã
robotCont.style.display = (robots > 0 || chargingStations > 0) ? '' : 'none';
robotsCountElem.textContent = Math.floor(robots);
maxRobotsElem.textContent = getMaxRobots();
}

// === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
function gameLoop() {
const now = Date.now();
const delta = (now - lastUpdate) / 1000;
lastUpdate = now;

// –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –ø–∞–Ω–µ–ª—è–º–∏
if (energy < maxEnergy) {
energy += panels * panelProduction * delta;
if (energy > maxEnergy) energy = maxEnergy;
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ä–æ–±–æ—Ç–∞
if (chargingStations > 0 && robots < getMaxRobots()) {
robotProgress += delta / robotBuildTime;
robProgCont.classList.remove('hidden');
if (robotProgress >= 1) {
robots++;
robotProgress -= 1;
tick();
}
robProgBar.style.width = `${Math.min(robotProgress, 1) * 100}%`;
} else {
robotProgress = 0;
robProgBar.style.width = '0%';
robProgCont.classList.add('hidden');
}

// –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Ä–æ–±–æ—Ç–∞–º–∏
if (robots >= 1) {
energy = Math.max(0, energy - robots * 2 * delta);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
checkAssistant();

updateUI();
saveGame();
requestAnimationFrame(gameLoop);
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===
panelBtn.onclick = () => {
const cost = getNextPanelCost();
if (energy >= cost) {
energy -= cost;
panels++;
tick();
saveGame();
updateUI();
checkAssistant();
} else {
alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏!');
}
};

treeBtn.onclick = () => {
    if (energy >= 100) {
        energy -= 100;        // –¢—Ä–∞—Ç–∏–º 100 —ç–Ω–µ—Ä–≥–∏–∏
        trees++;              // –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ—Ä–µ–≤–æ
        tick();               // –ó–≤—É–∫
        saveGame();           // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        updateUI();           // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        checkAssistant();     // –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞!');
    }
};

stationBtn.onclick = () => {
const cost = getNextStationCost();
if (trees >= cost) {
trees -= cost;
chargingStations++;
tick();
saveGame();
updateUI();
checkAssistant();
} else {
alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏!');
}
};

// === –ó–ê–ü–£–°–ö ===
loadGame();
updateUI();
gameLoop();

});
