// == –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM ==
(function initTMA() {
  try {
    if (window.Telegram && Telegram.WebApp) {
      Telegram.WebApp.ready();
      const scheme = Telegram.WebApp.colorScheme;
      Telegram.WebApp.setHeaderColor?.(scheme === 'dark' ? '#000000' : '#ffffff');
    }
  } catch (e) {}
})();

// == –ó–í–£–ö–û–í–û–ô –¢–ò–ö ==
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
function tick() {
  const o = audioCtx.createOscillator();
  const g = audioCtx.createGain();
  o.type = 'square'; o.frequency.value = 2200;
  g.gain.value = 0.02;
  o.connect(g); g.connect(audioCtx.destination);
  const now = audioCtx.currentTime;
  o.start(now);
  g.gain.exponentialRampToValueAtTime(0.0001, now + 0.04);
  o.stop(now + 0.045);
}

document.addEventListener('DOMContentLoaded', () => {
  // === –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ì–†–´ ===
  const maxEnergy = 5000;
  const panelProduction = 0.315;
  const priceRatio = 1.12;
  const basePanelCost = 10;
  const baseStationCost = 5;
  const stationPriceRatio = 2.5;
  const robotBuildTime = 40; // —Å–µ–∫ –Ω–∞ —Ä–æ–±–æ—Ç–∞

  let energy = 0;
  let panels = 1;
  let trees = 0;
  let chargingStations = 0;
  let robots = 0;
  let robotProgress = 0;
  let lastUpdate = Date.now();

  // === DOM –≠–õ–ï–ú–ï–ù–¢–´ ===
// === DOM –≠–õ–ï–ú–ï–ù–¢–´ ===
const energyElem       = document.getElementById('energy');
const productionElem   = document.getElementById('production');
const panelsCountElem  = document.getElementById('panels-count');
const panelCostElem    = document.getElementById('panel-cost');
const panelBtn         = document.getElementById('panel-btn');
const treeBtn          = document.getElementById('tree-btn');
const treesCountElem   = document.getElementById('trees-count');
const treesContainer   = document.getElementById('trees-container');
const stationBtn       = document.getElementById('charging-station-btn');
const robotCont        = document.getElementById('robots-container');
const robotsCountElem  = document.getElementById('robots-count');
const maxRobotsElem    = document.getElementById('max-robots');
const robProgCont      = document.getElementById('robot-progress-container');
const robProgBar       = document.getElementById('robot-progress-bar');

// === –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–Å–¢–û–í ===
function getNextPanelCost() {
  return Math.floor(basePanelCost * Math.pow(priceRatio, panels - 1));
}

function getNextStationCost() {
  return Math.floor(baseStationCost * Math.pow(stationPriceRatio, chargingStations));
}

function getMaxRobots() {
  return chargingStations * 2;
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï/–ó–ê–ì–†–£–ó–ö–ê ===
function saveGame() {
  localStorage.setItem('minirobots-save', JSON.stringify({
    energy,
    panels,
    trees,
    chargingStations,
    robots,
    robotProgress,
    lastUpdate: Date.now()
  }));
}

function loadGame() {
  const data = JSON.parse(localStorage.getItem('minirobots-save') || '{}');
  energy           = typeof data.energy === 'number' ? data.energy : 0;
  panels           = typeof data.panels === 'number' ? data.panels : 1;
  trees            = typeof data.trees === 'number' ? data.trees : 0;
  chargingStations = typeof data.chargingStations === 'number' ? data.chargingStations : 0;
  robots           = typeof data.robots === 'number' ? data.robots : 0;
  robotProgress    = typeof data.robotProgress === 'number' ? data.robotProgress : 0;
  lastUpdate       = data.lastUpdate || Date.now();
}


  // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===
  function updateUI() {
    // –≠–Ω–µ—Ä–≥–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    energyElem.textContent = energy.toFixed(1);
    productionElem.textContent = (panels * panelProduction).toFixed(2);

    // –ü–∞–Ω–µ–ª–∏
    panelsCountElem.textContent = panels;
    panelCostElem.textContent = getNextPanelCost();

    // –ö–Ω–æ–ø–∫–∞ —Ä—É–±–∫–∏ –¥–µ—Ä–µ–≤–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —ç–Ω–µ—Ä–≥–∏–∏ ‚â• 30
if (treeBtn) {
  treeBtn.style.display = energy >= 30 ? '' : 'none';
}


    // –°—Ç–∞–Ω—Ü–∏–∏
    stationBtn.style.display = trees >= 1 ? '' : 'none';
    stationBtn.textContent = `üîã –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—Ä—è–¥–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é (${chargingStations}) ‚Äî ${getNextStationCost()}üå≥`;

    // –†–æ–±–æ—Ç—ã
    robotCont.style.display = (robots > 0 || chargingStations > 0) ? '' : 'none';
    robotsCountElem.textContent = Math.floor(robots);
    maxRobotsElem.textContent = getMaxRobots();
  }

  // === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
  function gameLoop() {
    const now = Date.now();
    const delta = (now - lastUpdate) / 1000;
    lastUpdate = now;

    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –ø–∞–Ω–µ–ª—è–º–∏
    if (energy < maxEnergy) {
      energy += panels * panelProduction * delta;
      if (energy > maxEnergy) energy = maxEnergy;
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ä–æ–±–æ—Ç–∞
    if (chargingStations > 0 && robots < getMaxRobots()) {
      robotProgress += delta / robotBuildTime;
      robProgCont.classList.remove('hidden');
      if (robotProgress >= 1) {
        robots++;
        robotProgress -= 1;
        tick();
      }
      robProgBar.style.width = `${Math.min(robotProgress, 1) * 100}%`;
    } else {
      robotProgress = 0;
      robProgBar.style.width = '0%';
      robProgCont.classList.add('hidden');
    }

    // –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Ä–æ–±–æ—Ç–∞–º–∏
    if (robots >= 1) {
      energy = Math.max(0, energy - robots * 2 * delta);
    }

    updateUI();
    saveGame();
    requestAnimationFrame(gameLoop);
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===
  panelBtn.onclick = () => {
    const cost = getNextPanelCost();
    if (energy >= cost) {
      energy -= cost;
      panels++;
      tick();
      saveGame();
      updateUI();
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏!');
    }
  };
  treeBtn.onclick = () => {
  if (energy >= 100) {
    energy -= 100;
    trees++;
    tick();
    saveGame();
    updateUI();
  } else {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞!');
  }
};

stationBtn.onclick = () => {
  const cost = getNextStationCost();
  if (trees >= cost) {
    trees -= cost;
    chargingStations++;
    tick();
    saveGame();
    updateUI();
  } else {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏!');
  }
};


  // === –ó–ê–ü–£–°–ö ===
  loadGame();
  updateUI();
  gameLoop();
});
